# -*- coding: utf-8 -*-
"""capsule classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DLkenwt62n2C-dmKedAmoO62NbLk2aI4
"""

#  prediction#

from google.colab import drive
drive.mount('/content/drive')

import warnings
warnings.filterwarnings("ignore")
import os
import shutil
import glob
TRAIN_DIR = " /content/drive/MyDrive/tablet/train"
ORG_DIR = " /content/drive/MyDrive/tablet"
CLASS =['contamination','crack','good']

for c in CLASS :
  DEST =os.path.join(TRAIN_DIR,c)
  #if directory is not present then create one 
if not os.path.exists(DEST):
    os.makedirs(DEST)


for img_path in glob.glob(os.path.join(ORG_DIR,c)+"*"):
      SRC=img_path
      shutil.copy(SRC,DEST)

os.listdir("/content/drive/MyDrive/tablet/train")

#building the model
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
from keras.layers import Dense,Flatten
from keras.models import Model
from keras.applications.inception_v3 import InceptionV3,preprocess_input
 
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import load_img
from tensorflow.keras.utils import img_to_array
import keras

base_model=InceptionV3(input_shape=(256,256,3),include_top=False)

for layer in base_model.layers:
  layer.trainable=False

X=Flatten()(base_model.output)
X=Dense(units=3,activation='softmax')(X)

#final model
model=Model(base_model.input,X)

#compiling the model
model.compile(optimizer='adam',loss=keras.losses.categorical_crossentropy,metrics=['accuracy'])

#summary
model.summary()

#preprocess
train_datagen=ImageDataGenerator(featurewise_center=True,
                                 rotation_range=0.4,
                                 width_shift_range=0.3,
                                 horizontal_flip=True,
                                 preprocessing_function=preprocess_input,
                                 zoom_range=0.4,
                                 shear_range=0.4)
train_data = train_datagen.flow_from_directory(directory="/content/drive/MyDrive/tablet/train",target_size=(256,256),batch_size=36)

train_data.class_indices

t_img, label= train_data.next()

t_img.shape

def poltImages(img_arr , label):

  for idx , img in enumerate(img_arr):
    if idx <=10 :
      plt.figure(figsize= (5,5))
      plt.imshow(img)
      plt.title(img.shape)
      plt.axis = False
      plt.show()

#model checkpoints
from keras.callbacks import ModelCheckpoint,EarlyStopping
mc= ModelCheckpoint(filepath="./best_model.h5",
                              monitor="accuracy",
                              verbose=1,
                              save_best_only=True )
es=EarlyStopping (monitor="accuracy",min_delta=0.01,patience=5,verbose=1)
cb=[mc,es]

#train
his = model.fit_generator(train_data,steps_per_epoch=10, epochs=30, callbacks=cb)

#graph
from keras.models import load_model
model=load_model("/content/best_model.h5")
h=his.history
h.keys()

plt.plot(h['loss'])
plt.plot(h['accuracy'],'go--',c="red")
plt.title("loss vs accuracy")
plt.show()

#validate model
path="/content/drive/MyDrive/tablet/test/contaminated/pill_ginseng_contamination_305.png"
img=load_img(path,target_size=(256,256))
i=img_to_array(img)
i=preprocess_input(i)
input_arr=np.array([i])
input_arr.shape
pred=np.argmax(model.predict(input_arr))
if pred==0 :
  print("The tablet is contaminated")
elif pred==1 :
  print ("The tablet has a crack")
else :
  print("The tablet is good")

#display
plt.imshow(input_arr[0])
plt.title("input image")
plt.show()